{"version":3,"sources":["components/Ship.js","components/Cell.js","data/shipsData.js","components/Gameboard.js","components/Message.js","components/Stats.js","components/Game.js","App.js","index.js"],"names":["Ship","React","forwardRef","ref","id","length","player","className","Array","fill","map","cell","index","Cell","x","y","wasHit","containsShip","isShipSunk","playerPlay","gameState","board","data-x","data-y","onClick","event","xmlns","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","cx","cy","r","x1","y1","x2","y2","ships","name","Gameboard","size","changeGameState","changeCurrentPlayer","currentPlayer","changeLastShipSunk","changePlayerStats","difficulty","changeGameResult","useState","setBoard","setShips","shipsChart","setShipsChart","hits","accuracy","fleet","shipsData","reduce","sum","current","shipsSunk","wins","playerStats","setPlayerStats","boardRef","useRef","shipsRef","firstHit","setFirstHit","previousHit","setPreviousHit","directions","setDirections","previousDirection","setPreviousDirection","generateCoordinates","width","Math","floor","random","checkSpacesAvailability","coordinates","row","col","randomPlaceShip","ship","orientation","placedShip","useEffect","forEach","shipElem","style","gridArea","classList","add","remove","displayShip","dragOnMouseDown","target","closest","boardCoords","getBoundingClientRect","clientWidth","preventDefault","zIndex","shiftX","clientX","left","shiftY","clientY","top","dragOnMouseMove","pageX","pageY","offsetWidth","offsetHeight","moveAt","document","addEventListener","dragOnMouseUp","round","subArr","findNextAvailableSpace","Object","assign","updateShips","updateBoard","removeEventListener","onMouseDown","originalCoordinates","radius","i","prevShips","prevShip","prevBoard","chart","dataset","handleTurn","generateRandomPlay","currentBoard","flat","includes","filter","item","endGame","prevStats","stats","from","Set","handleComputerTurn","prevDirections","slice","currentDirections","JSON","stringify","setTimeout","computerNormalPlay","computerEasyPlay","boardCopy","placedShips","push","randomPlaceFleet","onDoubleClick","tempLength","rotate","xIndex","Fragment","yIndex","Message","reset","lastShipSunk","gameResult","type","Stats","player1","player2","gameNumber","Game","setGameState","setGameResult","setGameNumber","setDifficulty","setCurrentPlayer","setLastShipSunk","player1Stats","setPlayer1Stats","player2Stats","setPlayer2Stats","result","prevNumber","prevPlayer","height","transform","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7c4b7dc5.chunk.js","sourcesContent":["import React from 'react'\n\nconst Ship = React.forwardRef(({ id, length, player }, ref) => {\n\n  return (\n\n    <div className=\"ship\" ref={ref} id={id}>\n      {\n        Array(length).fill(null).map((cell, index) => {\n          return <div key={index} className={`cell--${player} cell--ship`}></div>\n        })\n      }\n    </div>\n  )\n})\n\nexport default Ship","import React from 'react';\n\nfunction Cell({\n  x,\n  y,\n  wasHit,\n  containsShip,\n  isShipSunk,\n  playerPlay,\n  gameState,\n  player,\n  board,\n}) {\n  return (\n    <div\n      className={\n        `cell + cell--${player}` +\n        (board ? ' cell--board' : '') +\n        (isShipSunk ? ' cell--sunk' : '') +\n        (player === 1 && containsShip ? ' cell--ship' : '')\n      }\n      data-x={x}\n      data-y={y}\n      onClick={(event) => {\n        if (gameState === 'game' && player === 2) {\n          playerPlay(event);\n        }\n      }}\n    >\n      {wasHit && containsShip && (\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          className='icon icon-tabler icon-tabler-circle mark--o'\n          viewBox='0 0 24 24'\n          strokeWidth='1.5'\n          stroke={player === 1 || (player === 2 && isShipSunk) ? '#00131a' : '#02ffff'}\n          fill='none'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        >\n          <path stroke='none' d='M0 0h24v24H0z' fill='none' />\n          <circle cx='12' cy='12' r='9' />\n        </svg>\n      )}\n      {wasHit && !containsShip && (\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          className='icon icon-tabler icon-tabler-x mark--x'\n          viewBox='0 0 24 24'\n          strokeWidth='1.5'\n          stroke='#02ffff'\n          fill='none'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        >\n          <path stroke='none' d='M0 0h24v24H0z' fill='none' />\n          <line x1='18' y1='6' x2='6' y2='18' />\n          <line x1='6' y1='6' x2='18' y2='18' />\n        </svg>\n      )}\n    </div>\n  );\n}\n\nexport default Cell;\n","const ships = [\n  {\n    id: 0,\n    name: 'carrier',\n    length: 5\n  },\n  {\n    id: 1,\n    name: 'battleship',\n    length: 4\n  },\n  {\n    id: 2,\n    name: 'cruiser',\n    length: 3\n  },\n  {\n    id: 3,\n    name: 'submarine',\n    length: 3\n  },\n  {\n    id: 4,\n    name: 'destroyer',\n    length: 2\n  }\n]\n\nexport default ships","import React, { useState, useEffect, useRef } from 'react';\nimport Ship from './Ship';\nimport Cell from './Cell';\nimport shipsData from '../data/shipsData';\n\nfunction Gameboard({\n  size,\n  gameState,\n  player,\n  changeGameState,\n  changeCurrentPlayer,\n  currentPlayer,\n  changeLastShipSunk,\n  changePlayerStats,\n  difficulty,\n  changeGameResult\n}) {\n  // -- STATE VARIABLES AND REFS --\n\n  const [board, setBoard] = useState(\n    Array(size)\n      .fill(null)\n      .map(() => Array(size).fill(null))\n  );\n\n  /* board is an array that initially contains:\n    - null if the space is empty\n    - a number (=the ship id) if it contains a ship\n    */\n\n  const [ships, setShips] = useState([\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n  ]);\n\n  /* ships is an array that contains ship objects.\n    A ship looks something like this:\n     {\n      id: 1,\n      coordinates: {x: 0, y: 0},\n      length: 5,\n      width: 1\n     }\n    */\n\n  const [shipsChart, setShipsChart] = useState(\n    Array(size)\n      .fill(null)\n      .map(() => Array(size).fill(null))\n  );\n\n  /* shipsChart is a copy of board that only contains ships positions\n   */\n\n  const [playerStats, setPlayerStats] = useState({\n    hits: 0,\n    accuracy: 0,\n    fleet: shipsData.reduce((sum, current) => sum + +current.length, 0),\n    shipsSunk: [],\n    wins: 0,\n  });\n\n  const boardRef = useRef(null);\n  const shipsRef = [\n    useRef(null),\n    useRef(null),\n    useRef(null),\n    useRef(null),\n    useRef(null),\n  ];\n\n  // States variables used to improve computer's plays\n  const [firstHit, setFirstHit] = useState({ x: '', y: '' });\n  const [previousHit, setPreviousHit] = useState({ x: '', y: '' });\n  const [directions, setDirections] = useState([]);\n  const [previousDirection, setPreviousDirection] = useState({});\n\n  // -- FLEET PLACEMENT --\n\n  /* 1. Placing ships randomly :\n    - Generate random coordinates until available coordinates are found\n    - Update board state variable to place the ship on it\n    - Visually display the ship on its right place with useEffect.\n  */\n\n  // Generate random orientation.\n  const generateOrientation = (length) =>\n    Math.random() > 0.5 ? { length: 1, width: length } : { length, width: 1 };\n\n  // Generate random first coordinates while taking the ship's length into account.\n  // Return {x:..., y:... }.\n  const generateCoordinates = ({ length, width }) => ({\n    x: Math.floor(Math.random() * (size - length + 1)),\n    y: Math.floor(Math.random() * (size - width + 1)),\n  });\n\n  // Check if the ship can be placed on those spaces or if they are already occupied.\n  // Return true if the spaces are available, false otherwise.\n  const checkSpacesAvailability = (board, coordinates, length, width) => {\n    for (let row = coordinates.x; row < coordinates.x + length; row += 1) {\n      for (let col = coordinates.y; col < coordinates.y + width; col += 1) {\n        if (board[row][col] !== null) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  // Place one ship randomly\n  const randomPlaceShip = (board, ship) => {\n    const orientation = generateOrientation(ship.length);\n\n    let coordinates;\n    do {\n      coordinates = generateCoordinates(orientation);\n    } while (\n      !checkSpacesAvailability(\n        board,\n        coordinates,\n        orientation.length,\n        orientation.width\n      )\n    );\n\n    const placedShip = {};\n    placedShip.id = ship.id;\n    placedShip.coordinates = coordinates;\n    placedShip.length = orientation.length;\n    placedShip.width = orientation.width;\n    return placedShip;\n  };\n\n  // Loops to place all the ships randomly\n  const randomPlaceFleet = (ships) => {\n    const boardCopy = Array(size)\n      .fill(null)\n      .map(() => Array(size).fill(null));\n    const placedShips = [];\n    for (const ship of ships) {\n      const placedShip = randomPlaceShip(boardCopy, ship);\n      placedShips.push(placedShip);\n      for (\n        let { x } = placedShip.coordinates;\n        x < placedShip.coordinates.x + placedShip.length;\n        x += 1\n      ) {\n        for (\n          let { y } = placedShip.coordinates;\n          y < placedShip.coordinates.y + placedShip.width;\n          y += 1\n        ) {\n          boardCopy[x][y] = placedShip.id;\n        }\n      }\n    }\n\n    // Update board and ships states.\n    setShips(placedShips);\n    setBoard(boardCopy);\n  };\n\n  // Once the ships coordinates are determined,\n  // they are displayed on their right place on the board.\n  const displayShip = (shipElem, ship) => {\n    shipElem.current.style.gridArea = `${ship.coordinates.x + 1} / ${\n      ship.coordinates.y + 1\n    } / ${ship.coordinates.x + ship.length + 1} / ${\n      ship.coordinates.y + ship.width + 1\n    }`;\n    ship.length > ship.width ? shipElem.current.classList.add('ship--vertical') : shipElem.current.classList.remove('ship--vertical');\n  };\n\n  useEffect(() => {\n    player === 1 &&\n      ships.forEach((ship, index) => {\n        if (!ship.coordinates) return;\n        displayShip(shipsRef[index], ship);\n      });\n  }, [ships]);\n\n  /* 2. Manually placing the ships.\n  Once the ships have been placed automatically at the start,\n  the user can choose to move / rotate them manually before starting the game.\n  */\n\n  // Allow players to drag their ships to place them\n  const dragOnMouseDown = (event) => {\n    // Initializing : gets ship, board position, cell size\n    if (!event.target.closest('.ship')) return;\n    const boardCoords = boardRef.current.getBoundingClientRect();\n    const cell = boardRef.current.clientWidth / size;\n    const target = event.target.closest('.ship');\n    const id = +target.id;\n    event.preventDefault();\n\n    // Prepare the ship for moving\n    shipsRef[id].current.style.zIndex = 1000;\n\n    // Remember where we click on the ship\n    const shiftX =\n      event.clientX - shipsRef[id].current.getBoundingClientRect().left;\n    const shiftY =\n      event.clientY - shipsRef[id].current.getBoundingClientRect().top;\n\n    const moveAt = (pageX, pageY) => {\n      let left = pageX - shiftX - boardCoords.left;\n      let top = pageY - shiftY - boardCoords.top;\n      shipsRef[id].current.style.gridArea = '';\n\n      // Limits draggable area to the board\n      if (left < 0) {\n        left = 0;\n      }\n\n      if (\n        left >\n        boardRef.current.clientWidth - shipsRef[id].current.offsetWidth\n      ) {\n        left = boardRef.current.clientWidth - shipsRef[id].current.offsetWidth;\n      }\n\n      if (top < 0) {\n        top = 0;\n      }\n\n      if (\n        top >\n        boardRef.current.offsetHeight - shipsRef[id].current.offsetHeight\n      ) {\n        top = boardRef.current.offsetHeight - shipsRef[id].current.offsetHeight;\n      }\n\n      shipsRef[id].current.style.left = `${left}px`;\n      shipsRef[id].current.style.top = `${top}px`;\n    };\n\n    const dragOnMouseMove = (event) => {\n      moveAt(event.pageX, event.pageY);\n    };\n\n    const dragOnMouseUp = () => {\n      // Calculate the current position\n      let coordinates = {\n        x: Math.round(\n          (shipsRef[id].current.getBoundingClientRect().top - boardCoords.top) /\n            cell\n        ),\n        y: Math.round(\n          (shipsRef[id].current.getBoundingClientRect().left -\n            boardCoords.left) /\n            cell\n        ),\n      };\n\n      // Checks if the spaces are available. If they aren't, find the next available space and place the ship there.\n      if (\n        !checkSpacesAvailability(\n          board.map((subArr) =>\n            subArr.map((cell) => (cell === id ? null : cell))\n          ),\n          coordinates,\n          ships[id].length,\n          ships[id].width\n        )\n      ) {\n        coordinates = findNextAvailableSpace(\n          board.map((subArr) =>\n            subArr.map((cell) => (cell === id ? null : cell))\n          ),\n          coordinates,\n          ships[id].length,\n          ships[id].width\n        );\n      }\n\n      // Update ships state variable and board with the new coordinates\n      const ship = Object.assign({}, ships[id]);\n      ship.coordinates = coordinates;\n\n      updateShips(ship);\n      updateBoard(ship);\n\n      // Finish dragging\n      shipsRef[id].current.style.left = '';\n      shipsRef[id].current.style.top = '';\n      shipsRef[id].current.style.zIndex = '';\n\n      document.removeEventListener('mousemove', dragOnMouseMove);\n      document.removeEventListener('mouseup', dragOnMouseUp);\n      shipsRef[id].current.onMouseDown = null;\n    };\n\n    document.addEventListener('mousemove', dragOnMouseMove);\n    document.addEventListener('mouseup', dragOnMouseUp);\n  };\n\n  // Find next available space if the player put the ship on an occupied space\n  const findNextAvailableSpace = (\n    board,\n    originalCoordinates,\n    length,\n    width\n  ) => {\n    let coordinates = originalCoordinates;\n    let radius = 1;\n\n    // Looks at all the adjacent spaces.\n    // If they are all occupied, expands the search radius and looks at the further spaces, etc.\n    while (!checkSpacesAvailability(board, coordinates, length, width)) {\n      for (let i = 0; i <= radius; i += 1) {\n        if (\n          coordinates.x - i > 0 &&\n          coordinates.y - (radius - i) > 0 &&\n          checkSpacesAvailability(\n            board,\n            { x: coordinates.x - i, y: coordinates.y - (radius - i) },\n            length,\n            width\n          )\n        ) {\n          coordinates = {\n            x: coordinates.x - i,\n            y: coordinates.y - (radius - i),\n          };\n        } else if (\n          coordinates.x - i > 0 &&\n          coordinates.y + (radius - i) < size - length &&\n          checkSpacesAvailability(\n            board,\n            { x: coordinates.x - i, y: coordinates.y + (radius - i) },\n            length,\n            width\n          )\n        ) {\n          coordinates = {\n            x: coordinates.x - i,\n            y: coordinates.y + (radius - i),\n          };\n        } else if (\n          coordinates.x + i < size - length &&\n          coordinates.y - (radius - i) > 0 &&\n          checkSpacesAvailability(\n            board,\n            { x: coordinates.x + i, y: coordinates.y - (radius - i) },\n            length,\n            width\n          )\n        ) {\n          coordinates = {\n            x: coordinates.x + i,\n            y: coordinates.y - (radius - i),\n          };\n        } else if (\n          coordinates.x + i < size - length &&\n          coordinates.y + (radius - i) < size - length &&\n          checkSpacesAvailability(\n            board,\n            { x: coordinates.x + i, y: coordinates.y + (radius - i) },\n            length,\n            width\n          )\n        ) {\n          coordinates = {\n            x: coordinates.x + i,\n            y: coordinates.y + (radius - i),\n          };\n        }\n      }\n      radius += 1;\n    }\n    return coordinates;\n  };\n\n  /* 3. Ships can be rotated on double click\n  - To rotate a ship, we swap its length and width.\n  - If swapping them causes the ship to overflow from the board, we change the coordinates to fit the board.\n  - If rotating causes the ship to overlap on another ship, we place it on the next available space.\n  */\n  const rotate = (event) => {\n    // Initializing\n    if (!event.target.closest('.ship')) return;\n    const target = event.target.closest('.ship');\n    const id = +target.id;\n\n    // Swap width and length\n    let ship = Object.assign({}, ships[id]);\n    let tempLength = ship.length;\n    ship.length = ship.width;\n    ship.width = tempLength;\n\n    // If the ship overflows from the board, its coordinate change to fit the board.\n    if (ship.coordinates.x + ship.length > size)\n      ship.coordinates.x = size - ship.length;\n    if (ship.coordinates.y + ship.width > size)\n      ship.coordinates.y = size - ship.width;\n\n    // If the ship rotated on an occupied space, it is placed on the next available space instead.\n    if (\n      !checkSpacesAvailability(\n        board.map((subArr) =>\n          subArr.map((cell) => (cell === ship.id ? null : cell))\n        ),\n        ship.coordinates,\n        ship.length,\n        ship.width\n      )\n    ) {\n      ship.coordinates = findNextAvailableSpace(\n        board.map((subArr) =>\n          subArr.map((cell) => (cell === ship.id ? null : cell))\n        ),\n        ship.coordinates,\n        ship.length,\n        ship.width\n      );\n    }\n\n    // Update ships and board state variables\n    updateShips(ship);\n    updateBoard(ship);\n  };\n\n  // Helper functions to update ships and board state variables when we move a specific ship / board.\n  const updateShips = (ship) => {\n    setShips((prevShips) =>\n      prevShips.map((prevShip) => {\n        if (prevShip.id === ship.id) {\n          return ship;\n        } else {\n          return prevShip;\n        }\n      })\n    );\n  };\n\n  const updateBoard = (ship) => {\n    setBoard((prevBoard) => {\n      const board = [...prevBoard].map((subArr) =>\n        subArr.map((cell) => (cell === ship.id ? null : cell))\n      );\n      for (\n        let x = ship.coordinates.x;\n        x < ship.coordinates.x + ship.length;\n        x += 1\n      ) {\n        for (\n          let y = ship.coordinates.y;\n          y < ship.coordinates.y + ship.width;\n          y += 1\n        ) {\n          board[x][y] = ship.id;\n        }\n      }\n      return board;\n    });\n  };\n\n  // When the game starts, the ship positions alone is saved in shipsChart\n  useEffect(() => {\n    if (gameState !== 'game') return;\n    setShipsChart(() => {\n      const chart = Array(size)\n        .fill(null)\n        .map(() => Array(size).fill(null));\n      for (let ship of ships) {\n        for (\n          let x = ship.coordinates.x;\n          x < ship.coordinates.x + ship.length;\n          x += 1\n        ) {\n          for (\n            let y = ship.coordinates.y;\n            y < ship.coordinates.y + ship.width;\n            y += 1\n          ) {\n            chart[x][y] = ship.id;\n          }\n        }\n      }\n      return chart;\n    });\n  }, [gameState]);\n\n  // -- GAME --\n\n  /* To play a turn :\n  - Get valid coordinates\n  - Play turn, mark the board, checks if a ship sunk, checks if there was a victory\n  - If there was no victory, change the player.\n  */\n\n  const playerPlay = (event) => {\n    if (\n      board[event.target.dataset.x][event.target.dataset.y] === 'X' ||\n      board[event.target.dataset.x][event.target.dataset.y] === 'O'\n    )\n      return;\n    handleTurn(event.target.dataset.x, event.target.dataset.y);\n  };\n\n  const computerEasyPlay = () => {\n    let coordinates;\n    do {\n      coordinates = generateRandomPlay();\n    } while (\n      board[coordinates.x][coordinates.y] === 'X' ||\n      board[coordinates.x][coordinates.y] === 'O'\n    );\n    // Small setTimeout to simulate \"thinking\" time.\n    setTimeout(() => handleTurn(coordinates.x, coordinates.y), 300);\n  };\n\n  const generateRandomPlay = () => {\n    return {\n      x: Math.floor(Math.random() * size),\n      y: Math.floor(Math.random() * size),\n    };\n  };\n\n  const handleTurn = (x, y) => {\n    // Nothing happens if the player choose a cell he already chose.\n    if (board[x][y] === 'X' || board[x][y] === 'O') return;\n\n    // If the cell is empty, we mark the cell as played on and move to the next turn.\n    if (board[x][y] === null) {\n      setBoard((prevBoard) => {\n        prevBoard[x][y] = 'X';\n        return prevBoard;\n      });\n    }\n\n    /* If the cell contains a ship:\n    1. The cell is marked with a 'O'\n    2. Check if the ship sunk\n    3. If it sunk, check if it was the last ship.\n    */\n\n    if (typeof board[x][y] === 'number') {\n      // Marks the cell with a 'O'\n      const currentBoard = [...board];\n      currentBoard[x][y] = 'O';\n      setBoard(currentBoard);\n\n      // Check if the ship sunk\n      // If it didn't sink, we keep on playing normally.\n      // If it sunk, we checked if there are ships left.\n      // We also announce that a ship fell.\n      if (!currentBoard.flat().includes(shipsChart[x][y])) {\n        changeLastShipSunk(player, shipsChart[x][y]);\n        // There are ships left: we go to the next turn.\n        if (\n          currentBoard.flat().filter((item) => typeof item === 'number')\n            .length === 0\n        ) {\n          endGame()\n        }\n      }\n    }\n\n    // At the end of each turn, swap player and update stats.\n    changeCurrentPlayer();\n    setPlayerStats((prevStats) => {\n      const stats = Object.assign({}, prevStats);\n      stats.hits = prevStats.hits + 1;\n      stats.accuracy = board.flat().filter((cell) => cell === 'O').length;\n      stats.fleet =\n        shipsData.reduce((sum, current) => sum + +current.length, 0) -\n        board.flat().filter((cell) => cell === 'O').length;\n      stats.shipsSunk = Array.from(\n        new Set(\n          shipsChart.flat().filter((ship) => !board.flat().includes(ship))\n        )\n      );\n      return stats;\n    });\n  };\n\n  const computerNormalPlay = () => {\n    let coordinates;\n    let currentDirections = [...directions];\n\n    do {\n      // If the computer has no indication about a potential ship position, it just hits random spaces.\n      if (currentDirections.length === 0) {\n        coordinates = generateRandomPlay();\n\n        // Otherwise, we follow the first direction of the directions array.\n      } else {\n        if (JSON.stringify(previousHit) === JSON.stringify(firstHit)) {\n          coordinates = {\n            x: firstHit.x + currentDirections[0].x,\n            y: firstHit.y + currentDirections[0].y,\n          };\n        } else {\n          // If the computer found a ship on an adjacent space, it keeps going in the same direction.\n          if (currentDirections[0] === previousDirection) {\n            coordinates = {\n              x: previousHit.x + currentDirections[0].x,\n              y: previousHit.y + currentDirections[0].y,\n            };\n            // If the computer didn't find a ship when he went in the previous direction, it tries another adjacent space.\n          } else {\n            coordinates = {\n              x: firstHit.x + currentDirections[0].x,\n              y: firstHit.y + currentDirections[0].y,\n            };\n          }\n        }\n        if (\n          coordinates.x < 0 ||\n          coordinates.x > size ||\n          coordinates.y < 0 ||\n          coordinates.y > size ||\n          board[coordinates.x][coordinates.y] === 'X' ||\n          board[coordinates.x][coordinates.y] === 'O'\n        ) {\n          currentDirections = currentDirections.slice(1);\n        }\n      }\n    } while (\n      coordinates.x < 0 ||\n      coordinates.x > size ||\n      coordinates.y < 0 ||\n      coordinates.y > size ||\n      board[coordinates.x][coordinates.y] === 'X' ||\n      board[coordinates.x][coordinates.y] === 'O'\n    );\n    setDirections(currentDirections);\n    setPreviousDirection(currentDirections[0]);\n    setTimeout(() => handleComputerTurn(coordinates.x, coordinates.y), 300);\n  };\n\n  const handleComputerTurn = (x, y) => {\n    // If the cell is empty:\n    // - We mark the cell as played.\n    // - If checking this cell was the result of searching adjacents spaces, we delete the direction we were searching in.\n    if (board[x][y] === null) {\n      setBoard((prevBoard) => {\n        prevBoard[x][y] = 'X';\n        return prevBoard;\n      });\n      setDirections((prevDirections) => {\n        let directions = [...prevDirections];\n        directions = directions.slice(1);\n        return directions;\n      });\n    }\n\n    /* If the cell contains a ship:\n    1. The cell is marked with a 'O'\n    2. Check if the ship sunk\n    3. If it sunk, check if it was the last ship.\n    */\n\n    if (typeof board[x][y] === 'number') {\n      // Marks the cell with a 'O'\n      const currentBoard = [...board];\n      currentBoard[x][y] = 'O';\n      setBoard(currentBoard);\n\n      // If finding the ship was the result of a random attack:\n      // - Tells the computer to remember this space\n      // - Tells the computer to search in adjacent spaces during the next few turns (top, bottom, left, right)\n      // If it was the result of searching adjacents spaces:\n      // - The computer keeps going in the same direction by remembering the direction it came from and the space it's just hit.\n      if (directions.length === 0) {\n        setFirstHit({ x, y });\n        setDirections([\n          { x: 0, y: 1 },\n          { x: 0, y: -1 },\n          { x: -1, y: 0 },\n          { x: 1, y: 0 },\n        ]);\n      }\n\n      // Check if the ship sunk\n      // If it didn't sink, we keep on playing normally.\n      // If it sunk, we check if there are ships left.\n      // We also announce that a ship fell.\n      // Tells the computer to not look in adjacent spaces anymore.\n      if (!currentBoard.flat().includes(shipsChart[x][y])) {\n        changeLastShipSunk(player, shipsChart[x][y]);\n        setDirections([]);\n        setFirstHit({ x: '', y: '' });\n        setPreviousHit({ x: '', y: '' });\n\n        // There are ships left: we go to the next turn.\n        if (\n          currentBoard.flat().filter((item) => typeof item === 'number')\n            .length === 0\n        ) {\n          endGame()\n        }\n      }\n    }\n\n    // Remember the computer's latest hit\n    setPreviousHit({ x, y });\n\n    // At the end of each turn, swap player and update stats.\n    changeCurrentPlayer();\n    setPlayerStats((prevStats) => {\n      const stats = Object.assign({}, prevStats);\n      stats.hits = prevStats.hits + 1;\n      stats.accuracy = board.flat().filter((cell) => cell === 'O').length;\n      stats.fleet =\n        shipsData.reduce((sum, current) => sum + +current.length, 0) -\n        board.flat().filter((cell) => cell === 'O').length;\n      stats.shipsSunk = Array.from(\n        new Set(\n          shipsChart.flat().filter((ship) => !board.flat().includes(ship))\n        )\n      );\n      return stats;\n    });\n  };\n\n  const endGame = () => {\n    changeGameState('end');\n    setPlayerStats((prevStats) => {\n      const stats = Object.assign({}, prevStats);\n      stats.wins = prevStats.wins + 1;\n      return stats;\n    });\n\n    if (player === 2) {\n      changeGameResult('victory')\n    } else {\n      changeGameResult('defeat')\n    }\n  }\n\n  // After the player plays, the computer plays.\n  // 2nd condition is added so that the computer only plays on its opponent's board.\n  useEffect(() => {\n    if (currentPlayer === 2 && player === 1) {\n      difficulty === 'normal' ? computerNormalPlay() : computerEasyPlay();\n    }\n  }, [currentPlayer]);\n\n  // -- GAME (RE)START --\n  // - Make player 1 the first player to play\n  // - Reset ships positions\n  // - Reset stats\n\n  // If the current player is player 2, swap it to player 1.\n  useEffect(() => {\n    if (gameState !== 'initialization') return;\n    currentPlayer === 2 && changeCurrentPlayer();\n  }, [gameState]);\n\n  // Place the ships randomly every time a new game begins.\n  useEffect(() => {\n    if (gameState !== 'initialization') return;\n    randomPlaceFleet(shipsData);\n    setShipsChart(\n      Array(size)\n        .fill(null)\n        .map(() => Array(size).fill(null))\n    );\n  }, [gameState]);\n\n  // Reset all stats except the number of wins\n  useEffect(() => {\n    if (gameState !== 'initialization') return;\n    setPlayerStats((prevStats) => {\n      const stats = Object.assign({}, prevStats);\n      stats.hits = 0;\n      stats.accuracy = 0;\n      stats.fleet = shipsData.reduce(\n        (sum, current) => sum + +current.length,\n        0\n      );\n      stats.shipsSunk = [];\n      return stats;\n    });\n  }, [gameState]);\n\n  // -- STATS --\n  // After the stats are updated, the data is sent to <Game /> to be displayed.\n  useEffect(() => {\n    changePlayerStats(playerStats);\n  }, [playerStats]);\n\n  return (\n    <div\n      className={`container container--${player}`}\n      onMouseDown={(event) => {\n        if (gameState === 'initialization') {\n          dragOnMouseDown(event);\n        }\n      }}\n      onDoubleClick={(event) => {\n        if (gameState === 'initialization') {\n          rotate(event);\n        }\n      }}\n      ref={boardRef}\n    >\n      <div className='board'>\n        {board.map((x, xIndex) => (\n          <React.Fragment key={xIndex}>\n            {x.map((y, yIndex) => (\n              <Cell\n                key={`${xIndex}-${yIndex}`}\n                x={xIndex}\n                y={yIndex}\n                wasHit={\n                  board[xIndex][yIndex] === 'X' || board[xIndex][yIndex] === 'O'\n                }\n                containsShip={shipsChart[xIndex][yIndex] !== null}\n                isShipSunk={\n                  shipsChart[xIndex][yIndex] !== null &&\n                  !board.flat().includes(shipsChart[xIndex][yIndex])\n                }\n                playerPlay={playerPlay}\n                gameState={gameState}\n                player={player}\n                board={true}\n              />\n            ))}\n          </React.Fragment>\n        ))}\n      </div>\n\n      {/*Ships components are only used before the game, to place the ships.*/}\n      {player === 1 &&\n        gameState === 'initialization' &&\n        shipsData.map((ship, index) => (\n          <Ship\n            length={ship.length}\n            id={ship.id}\n            key={ship.id}\n            ref={shipsRef[index]}\n            player={player}\n          />\n        ))}\n    </div>\n  );\n}\n\nexport default Gameboard;\n","import React from 'react'\nimport shipsData from '../data/shipsData'\n\nfunction Message({ gameState, changeGameState, currentPlayer, reset, lastShipSunk, gameResult }) {\n  return (\n    <div className=\"text\">\n\n      {gameState === 'initialization' &&\n      <>\n        <div className=\"instructions\">\n          Welcome, Lieutenant!<br/>\n          In such a battle, preparations are crucial. <br />\n          Take your time to think of the perfect strategy to defend your ships.<br/>\n          Drag your ships to place them, and double click to rotate them.<br/>\n          Engage in combat whenever you feel ready.\n        </div>\n\n        <button type='button' className=\"btn\" onClick={() => changeGameState('game')}>To Battle!</button>\n      </>\n      }\n\n      {gameState === 'game' &&\n      <>\n        <div className=\"text__player\">Current player: {currentPlayer}</div>\n        {lastShipSunk.player &&\n          <div className=\"text__ship\">Lieutenant {lastShipSunk.player}'s {shipsData[lastShipSunk.ship].name} sunk.</div>\n        }\n      </>\n      }\n\n      {gameState === 'end' &&\n      <>\n        <div className=\"text__end\">\n          <div className=\"text__result\">{gameResult}</div>\n          Would you like to play again?</div>\n\n      <button type='button' className=\"btn\" onClick={reset}>Play again</button>\n      </>\n      }\n\n    </div>\n  )\n}\n\nexport default Message\n","import React from 'react';\nimport shipsData from '../data/shipsData';\n\nfunction Stats({ player1, player2, gameNumber }) {\n  return (\n    <div className='stats'>\n      <div className='stats__stat'>\n        <span className='stats__name'>Accuracy:</span>\n        <span className='stats__value'>\n          {Math.floor((player2.accuracy / player2.hits) * 100) || 0}\n        </span>\n        <div className='stats__outer_bar'>\n          <div\n            className='stats__inner_bar'\n            style={{\n              width: `${(Math.floor((player2.accuracy / player2.hits) * 100) * 15) /\n                100 || 0\n                }vh`,\n            }}\n          ></div>\n        </div>\n      </div>\n      <div className='stats__stat'>\n        <span className='stats__name'>Ally Fleet:</span>\n        <span className='stats__value'>\n          {Math.floor(\n            (player1.fleet /\n              shipsData.reduce((sum, current) => sum + current.length, 0)) *\n            100\n          )}\n        </span>\n        <div className='stats__outer_bar'>\n          <div className='stats__inner_bar'\n            style={{\n              width: `${(Math.floor(\n                (player1.fleet /\n                  shipsData.reduce((sum, current) => sum + current.length, 0)) *\n                100\n              ) * 15) /\n                100\n                }vh`,\n            }}></div>\n        </div>\n      </div>\n      <div className='stats__stat'>\n        <span className='stats__name'>Enemy Fleet:</span>\n        <span className='stats__value'>\n          {Math.floor(\n            (player2.fleet /\n              shipsData.reduce((sum, current) => sum + current.length, 0)) *\n            100\n          )}\n        </span>\n        <div className='stats__outer_bar'>\n          <div className='stats__inner_bar'\n            style={{\n              width: `${(Math.floor(\n                (player2.fleet /\n                  shipsData.reduce((sum, current) => sum + current.length, 0)) *\n                100\n              ) * 15) /\n                100\n                }vh`,\n            }}></div>\n        </div>\n      </div>\n      <div className='stats__stat'>\n        <span className='stats__name'>Fleets defeated:</span>\n        <span className='stats__value'>{player2.wins}</span>\n        <div className='stats__outer_bar'>\n          <div className='stats__inner_bar'\n          style={{\n            width: `${player2.wins / gameNumber * 100 * 15 / 100 || 0}vh`,\n          }}></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Stats;\n","import React, { useState } from 'react';\nimport Gameboard from './Gameboard';\nimport Message from './Message';\nimport Stats from './Stats';\nimport shipsData from '../data/shipsData';\n\nfunction Game() {\n  /* Game has 3 possible game states :\n  1. Initialization: fleet placing\n  2. Game: actual gameplay, spaces selection until one of the fleet sinks.\n  3. End: display the result / winner.\n  */\n  const [gameState, setGameState] = useState('initialization');\n  const [gameResult, setGameResult] = useState('')\n  const [gameNumber, setGameNumber] = useState(0);\n  const [difficulty, setDifficulty] = useState('normal');\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [lastShipSunk, setLastShipSunk] = useState({ player: '', ship: '' });\n  const [player1Stats, setPlayer1Stats] = useState({\n    hits: 0,\n    accuracy: 0,\n    fleet: shipsData.reduce((sum, current) => sum + +current.length, 0),\n    shipsSunk: [],\n    wins: 0,\n  });\n  const [player2Stats, setPlayer2Stats] = useState({\n    hits: 0,\n    accuracy: 0,\n    fleet: shipsData.reduce((sum, current) => sum + +current.length, 0),\n    shipsSunk: [],\n    wins: 0,\n  });\n\n  const changeGameState = (gameState) => {\n    setGameState(gameState);\n  };\n\n  const changeGameResult = (result) => {\n    setGameResult(result);\n    setGameNumber(prevNumber => prevNumber + 1);\n  }\n\n  const changeCurrentPlayer = () => {\n    setCurrentPlayer((prevPlayer) => (prevPlayer === 1 ? 2 : 1));\n  };\n\n  const changeLastShipSunk = (player, ship) => {\n    setLastShipSunk({ player, ship });\n  };\n\n  const reset = () => {\n    setGameState('initialization');\n    setCurrentPlayer(1);\n  };\n\n  const changePlayer1Stats = (stats) => {\n    setPlayer1Stats(stats);\n  };\n\n  const changePlayer2Stats = (stats) => {\n    setPlayer2Stats(stats);\n  };\n\n  return (\n    <div className='game'>\n      <Gameboard\n        size={10}\n        gameState={gameState}\n        player={1}\n        changeGameState={changeGameState}\n        changeCurrentPlayer={changeCurrentPlayer}\n        currentPlayer={currentPlayer}\n        changeLastShipSunk={changeLastShipSunk}\n        changePlayerStats={changePlayer1Stats}\n        changeGameResult={changeGameResult}\n        difficulty={difficulty}\n      />\n      <Gameboard\n        size={10}\n        gameState={gameState}\n        player={2}\n        changeGameState={changeGameState}\n        changeCurrentPlayer={changeCurrentPlayer}\n        currentPlayer={currentPlayer}\n        changeLastShipSunk={changeLastShipSunk}\n        changePlayerStats={changePlayer2Stats}\n        changeGameResult={changeGameResult}\n        difficulty={difficulty}\n      />\n      <div className='settings'>\n        <Stats player1={player1Stats} player2={player2Stats} gameNumber={gameNumber} />\n\n        <div className='settings__difficulty'>\n          <button\n            onClick={() =>\n              setDifficulty(difficulty === 'normal' ? 'easy' : 'normal')\n            }\n          >\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              className='icon icon-tabler icon-tabler-caret-left'\n              width='20'\n              height='20'\n              viewBox='0 0 24 24'\n              strokeWidth='1'\n              stroke='#02ffff'\n              fill='#02ffff'\n              strokeLinecap='round'\n              strokeLinejoin='round'\n            >\n              <path stroke='none' d='M0 0h24v24H0z' fill='none' />\n              <path d='M18 15l-6-6l-6 6h12' transform='rotate(270 12 12)' />\n            </svg>\n          </button>\n          {difficulty}\n          <button\n            onClick={() =>\n              setDifficulty(difficulty === 'normal' ? 'easy' : 'normal')\n            }\n          >\n            <svg\n              xmlns='http://www.w3.org/2000/svg'\n              className='icon icon-tabler icon-tabler-caret-right'\n              width='20'\n              height='20'\n              viewBox='0 0 24 24'\n              strokeWidth='1'\n              stroke='#02ffff'\n              fill='#02ffff'\n              strokeLinecap='round'\n              strokeLinejoin='round'\n            >\n              <path stroke='none' d='M0 0h24v24H0z' fill='none' />\n              <path d='M18 15l-6-6l-6 6h12' transform='rotate(90 12 12)' />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <Message\n        gameState={gameState}\n        currentPlayer={currentPlayer}\n        lastShipSunk={lastShipSunk}\n        changeGameState={changeGameState}\n        reset={reset}\n        gameResult={gameResult}\n      />\n    </div>\n  );\n}\n\nexport default Game;\n","import Game from './components/Game'\nimport './sass/main.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Battleship</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}